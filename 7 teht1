#include <iostream>
#include <thread>
#include <chrono>

void ding(int current_level) {
    std::cout << "\033[33mKerros " << current_level << "\033[0m" << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
}

class Elevator {
public:
    Elevator(int lowst_lev, int highst_lev)
        : lowst_lev(lowst_lev), highst_lev(highst_lev), current_lev(1) {}

    void move_up() {
        current_lev++;
    }

    void move_down() {
        current_lev--;
    }

    void move_to(int target) {
        int target_lev = target;
        int movement = target_lev - current_lev;

        if (movement > 0) {
            for (int i = 0; i < movement; ++i) {
                move_up();
                ding(current_lev);
                if (current_lev == target_lev) {
                    std::cout << "\033[35mKerros " << current_lev << "\033[0m" << std::endl;
                }
            }
            current_lev = target_lev;
        }
        else if (movement < 0) {
            for (int i = 0; i < -movement; ++i) {
                move_down();
                ding(current_lev);
                if (current_lev == target_lev) {
                    std::cout << "\033[35mKerros " << current_lev << "\033[0m" << std::endl;
                }
            }
            current_lev = target_lev;
        }
        else {
            ding(current_lev);
            if (current_lev == target_lev) {
                std::cout << "\033[35mKerros " << current_lev << "\033[0m" << std::endl;
            }
        }
    }

private:
    int lowst_lev;
    int highst_lev;
    int current_lev;
};

int main() {
    Elevator h(1, 10);

    h.move_to(10);
    h.move_to(1);

    return 0;
}
