#include <iostream>
#include <vector>
#include <thread>
#include <chrono>

void ding(int current_level) {
    std::cout << "\033[33mKerros " << current_level << "\033[0m" << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
}

class Elevator {
public:
    Elevator(int lowst_lev, int highst_lev)
        : lowst_lev(lowst_lev), highst_lev(highst_lev), current_lev(1) {}

    void move_up() {
        current_lev++;
    }

    void move_down() {
        current_lev--;
    }

    void move_to(int target) {
        int target_lev = target;
        int movement = target_lev - current_lev;

        if (movement > 0) {
            for (int i = 0; i < movement; ++i) {
                move_up();
                ding(current_lev);
                if (current_lev == target_lev) {
                    std::cout << "\033[35mKerros " << current_lev << "\033[0m" << std::endl;
                }
            }
        }
        else if (movement < 0) {
            for (int i = 0; i < -movement; ++i) {
                move_down();
                ding(current_lev);
                if (current_lev == target_lev) {
                    std::cout << "\033[35mKerros " << current_lev << "\033[0m" << std::endl;
                }
            }
        }
        else {
            ding(current_lev);
            if (current_lev == target_lev) {
                std::cout << "\033[35mKerros " << current_lev << "\033[0m" << std::endl;
            }
        }
        current_lev = target_lev;
    }

private:
    int lowst_lev;
    int highst_lev;
    int current_lev;
};

class House {
public:
    House(int lowst_floor, int highst_floor, int amount_of_elev)
        : lowst_floor(lowst_floor), highst_floor(highst_floor), amount_of_elev(amount_of_elev) {
        for (int i = 0; i < amount_of_elev; ++i) {
            elevators.emplace_back(lowst_floor, highst_floor);
        }
    }

    void use_elev(int elev_num, int target_floor) {
        std::cout << "\033[33mCalling Elevator number " << elev_num << "\033[0m" << std::endl;
        if (elev_num >= 0 && elev_num < elevators.size()) {
            elevators[elev_num].move_to(target_floor);
        }
        else {
            std::cerr << "Invalid elevator number!" << std::endl;
        }
    }

    void fire_alarm() {
        std::cout << "\033[31mPALOHALYTYS!\033[0m" << std::endl;
        for (size_t index = 0; index < elevators.size(); ++index) {
            elevators[index].move_to(lowst_floor);
            std::cout << "\033[31mElevator " << index + 1 << " turvassa\033[0m" << std::endl;
        }
    }

private:
    int lowst_floor;
    int highst_floor;
    int amount_of_elev;
    std::vector<Elevator> elevators;
};

int main() {
    House house(1, 10, 3);

    house.use_elev(1, 5);
    house.use_elev(2, 10);

    house.fire_alarm();

    return 0;
}
